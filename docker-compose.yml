version: '3.9'

services:
  app:
    build:
      context: ./
      dockerfile: Dockerfile
    container_name: apiserver
    env_file: .env
    environment:
      - KEYCLOAK_CLIENT_SECRET=$KEYCLOAK_CLIENT_SECRET
    ports:
      - 8000:8000
    networks:
      - "sql-network"
    volumes:
      - ./src:/app
    command: >
      --rebuild-db always
      --fill-with-examples datasets computational_resources publications news events case_studies 
            presentations projects educational_resources organisations
        --limit 10 
        --url-prefix "" 
        --reload
    healthcheck:
      test: ["CMD", "python", "-c",  "import requests; requests.get('http://localhost:8000')"]
      interval: 60s
      timeout: 60s
      retries: 30
    depends_on:
      sqlserver:
        condition: service_healthy

  sqlserver:
    image: mysql
    container_name: sqlserver
    env_file: .env
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
    volumes:
      - ./data/mysql:/var/lib/mysql
    healthcheck:
      test: ["CMD", "mysqladmin", "-uroot", "-p$MYSQL_ROOT_PASSWORD", "ping", "-h", "localhost"]
      interval: 60s
      timeout: 60s
      retries: 30
    networks:
      - "sql-network"

  keycloak:
    image: quay.io/keycloak/keycloak:latest
    container_name: keycloak
    env_file: .env
    restart: unless-stopped
    environment:
      - HOSTNAME=$HOSTNAME
      - KEYCLOAK_ADMIN=$KEYCLOAK_ADMIN
      - KEYCLOAK_ADMIN_PASSWORD=$KEYCLOAK_ADMIN_PASSWORD
      - KC_HTTP_RELATIVE_PATH=$KC_HTTP_RELATIVE_PATH
      - KC_USERS=same_file
      - REDIRECT_URIS=$REDIRECT_URIS
      - POST_LOGOUT_REDIRECT_URIS=$POST_LOGOUT_REDIRECT_URIS
      - PROXY_ADDRESS_FORWARDING=true
    ports:
      - 8080:8080 
    networks:
      - "sql-network"
    volumes:
     - ./keycloak:/opt/keycloak/data/import 
    command: >
      start-dev
      --hostname-url http://$HOSTNAME$KC_HTTP_RELATIVE_PATH
      --hostname-admin-url http://$HOSTNAME$KC_HTTP_RELATIVE_PATH
      --import-realm

  nginx:
    image: nginx
    container_name: nginx
    restart: unless-stopped
    volumes:
      - ./nginx/conf.d:/etc/nginx/conf.d
    ports:
      - 80:80
      - 443:443
    networks:
      - "sql-network"
    depends_on:
      app:
        condition: service_healthy

networks:
  sql-network:
    driver: bridge

